From 74cb2f01ff3059380da61736a5fe35af659314b3 Mon Sep 17 00:00:00 2001
From: jakub <jakub@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Wed, 29 Aug 2018 12:32:13 +0000
Subject: [PATCH] 	PR c++/87122 	* pt.c (tsubst_expr) <case
 RANGE_FOR_STMT>: If 	processing_template_decl and decl is structured
 binding decl, call 	cp_finish_decomp.

	* g++.dg/cpp1z/decomp47.C: New test.


git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-8-branch@263954 138bc75d-0d04-0410-961f-82ee72b054a4
---
 gcc/cp/ChangeLog                      |  7 ++++++
 gcc/cp/pt.c                           |  2 ++
 gcc/testsuite/ChangeLog               |  5 +++++
 gcc/testsuite/g++.dg/cpp1z/decomp47.C | 32 +++++++++++++++++++++++++++
 4 files changed, 46 insertions(+)
 create mode 100644 gcc/testsuite/g++.dg/cpp1z/decomp47.C

diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index d017c66966de..87adf85dc3c2 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -16816,6 +16816,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,
 	    RANGE_FOR_IVDEP (stmt) = RANGE_FOR_IVDEP (t);
 	    RANGE_FOR_UNROLL (stmt) = RANGE_FOR_UNROLL (t);
 	    finish_range_for_decl (stmt, decl, expr);
+	    if (decomp_first && decl != error_mark_node)
+	      cp_finish_decomp (decl, decomp_first, decomp_cnt);
 	  }
 	else
 	  {
diff --git a/gcc/testsuite/g++.dg/cpp1z/decomp47.C b/gcc/testsuite/g++.dg/cpp1z/decomp47.C
new file mode 100644
index 000000000000..f0d202d696ac
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp1z/decomp47.C
@@ -0,0 +1,32 @@
+// PR c++/87122
+// { dg-do run { target c++14 } }
+// { dg-options "" }
+
+extern "C" void abort ();
+struct S { int a, b; };
+int c;
+
+template <int N>
+void
+foo ()
+{
+  S x[4] = { { N, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } };
+  auto f = [](auto & y) {
+    for (auto & [ u, v ] : y)	// { dg-warning "structured bindings only available with" "" { target c++14_down } }
+      {
+	if ((u & 1) != 1 || v != u + 1 || u < N || u > 7 || (c & (1 << u))
+	    || &u != &y[v / 2 - 1].a || &v != &y[v / 2 - 1].b)
+	  abort ();
+	c |= 1 << u;
+      }
+  };
+  f (x);
+}
+
+int
+main ()
+{
+  foo<1> ();
+  if (c != 0xaa)
+    abort ();
+}
